version: '3'

services:
  # FastAPI Login
  api_login:
    build: ./backend
    command: >
      /bin/bash -c "uvicorn backend.app.api.api_login:app --host 0.0.0.0 --port 8002 --reload"
    volumes:
      - ./protos:/app/protos
    env_file:
      - ./.env
    ports:
      - "8002:8002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net
      - frontend-backend-net

  celery_queries_worker:
    build: ./backend
    command: celery -A backend.worker.celery_start_queries worker -l INFO
    volumes:
      - ./protos:/app/protos/
    env_file:
      - ./.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net

  # Server PPG
  server_ppg:
    build: ./backend
    command: python backend/app/api/api.py
    volumes:
      - ./protos:/app/protos/
    env_file:
      - ./.env
    ports:
      - "${GRPC_SERVER_HOST}:${GRPC_SERVER_HOST}"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net

  # Server PPGLS
  server_ppgls:
    build: ./backend
    command: python backend/app/api/api_ppgls.py
    volumes:
      - ./protos:/app/protos/
    env_file:
      - ./.env
    ports:
      - "${GRPC_SERVER_PPGLS}:${GRPC_SERVER_PPGLS}"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net

  # Server GRAD
  server_grad:
    build: ./backend
    command: python backend/app/api/api_grad.py
    volumes:
      - ./protos:/app/protos/
    env_file:
      - ./.env
    ports:
      - "${GRPC_SERVER_GRAD}:${GRPC_SERVER_GRAD}"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net

  # Server USUARIOS
  server_usuarios:
    build: ./backend
    command: python backend/app/api/api_usuarios.py
    volumes:
      - ./protos:/app/protos/
    env_file:
      - ./.env
    ports:
      - "${GRPC_SERVER_USUARIOS}:${GRPC_SERVER_USUARIOS}"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - backend-net

  # Frontend Next.js
  # frontend:
  #   build: ./frontend
  #   command: npm run dev
  #   volumes:
  #     - ./frontend:/app
  #   ports:
  #     - "3000:3000"  # Porta padr√£o do Next.js
  #   networks:
  #     - frontend-backend-net

  # Redis
  redis:
    image: 'redis:latest'
    env_file:
      - ./.env
    command: --port ${REDIS_PORT}
    expose:
      - ${REDIS_PORT}
    networks:
      - backend-net

  # Banco de dados
  db:
    build: ./backend/db
    env_file:
      - ./.env
    command: -p ${POSTGRES_PORT}
    expose:
      - ${POSTGRES_PORT}
    volumes:
      # - ./dados/postgres_data:/var/lib/postgresql/data
      - ./backend/db/tarrafaDB_2_tables.sql:/docker-entrypoint-initdb.d/tarrafaDB_2_tables.sql
      - ./backend/db/tarrafaDB_grad_tables.sql:/docker-entrypoint-initdb.d/tarrafaDB_grad_tables.sql
      # - ./backup:/backup
    networks:
      - backend-net

  # PGAdmin
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: $PGADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $PGADMIN_SENHA
    ports:
      - "8008:80"
    restart: "no"
    networks:
      - backend-net

  rabbitmq:
    build:
      context: ./backend
      dockerfile: DockerfileRabbitmq
    hostname: rabbitmq
    env_file:
      - ./.env
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_PORT_MANAGEMENT}:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    networks:
      - backend-net

networks:
  frontend-backend-net:
  backend-net: