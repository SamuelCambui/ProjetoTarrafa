/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.5
 * source: messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protos {
    export class HomeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_ies?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
            }
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id_ies?: string;
        }): HomeRequest {
            const message = new HomeRequest({});
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            return message;
        }
        toObject() {
            const data: {
                id_ies?: string;
            } = {};
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_ies.length)
                writer.writeString(1, this.id_ies);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_ies = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HomeRequest {
            return HomeRequest.deserialize(bytes);
        }
    }
    export class PpgRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_ies?: string;
            id_ppg?: string;
            anoi?: number;
            anof?: number;
            nota?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
                if ("id_ppg" in data && data.id_ppg != undefined) {
                    this.id_ppg = data.id_ppg;
                }
                if ("anoi" in data && data.anoi != undefined) {
                    this.anoi = data.anoi;
                }
                if ("anof" in data && data.anof != undefined) {
                    this.anof = data.anof;
                }
                if ("nota" in data && data.nota != undefined) {
                    this.nota = data.nota;
                }
            }
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id_ppg() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id_ppg(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get anoi() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set anoi(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get anof() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set anof(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get nota() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set nota(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id_ies?: string;
            id_ppg?: string;
            anoi?: number;
            anof?: number;
            nota?: string;
        }): PpgRequest {
            const message = new PpgRequest({});
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            if (data.id_ppg != null) {
                message.id_ppg = data.id_ppg;
            }
            if (data.anoi != null) {
                message.anoi = data.anoi;
            }
            if (data.anof != null) {
                message.anof = data.anof;
            }
            if (data.nota != null) {
                message.nota = data.nota;
            }
            return message;
        }
        toObject() {
            const data: {
                id_ies?: string;
                id_ppg?: string;
                anoi?: number;
                anof?: number;
                nota?: string;
            } = {};
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            if (this.id_ppg != null) {
                data.id_ppg = this.id_ppg;
            }
            if (this.anoi != null) {
                data.anoi = this.anoi;
            }
            if (this.anof != null) {
                data.anof = this.anof;
            }
            if (this.nota != null) {
                data.nota = this.nota;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_ies.length)
                writer.writeString(1, this.id_ies);
            if (this.id_ppg.length)
                writer.writeString(2, this.id_ppg);
            if (this.anoi != 0)
                writer.writeInt32(3, this.anoi);
            if (this.anof != 0)
                writer.writeInt32(4, this.anof);
            if (this.nota.length)
                writer.writeString(5, this.nota);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PpgRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PpgRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_ies = reader.readString();
                        break;
                    case 2:
                        message.id_ppg = reader.readString();
                        break;
                    case 3:
                        message.anoi = reader.readInt32();
                        break;
                    case 4:
                        message.anof = reader.readInt32();
                        break;
                    case 5:
                        message.nota = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PpgRequest {
            return PpgRequest.deserialize(bytes);
        }
    }
    export class PpgJson extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nome?: string;
            json?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nome" in data && data.nome != undefined) {
                    this.nome = data.nome;
                }
                if ("json" in data && data.json != undefined) {
                    this.json = data.json;
                }
            }
        }
        get nome() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nome(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get json() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set json(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            nome?: string;
            json?: string;
        }): PpgJson {
            const message = new PpgJson({});
            if (data.nome != null) {
                message.nome = data.nome;
            }
            if (data.json != null) {
                message.json = data.json;
            }
            return message;
        }
        toObject() {
            const data: {
                nome?: string;
                json?: string;
            } = {};
            if (this.nome != null) {
                data.nome = this.nome;
            }
            if (this.json != null) {
                data.json = this.json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nome.length)
                writer.writeString(1, this.nome);
            if (this.json.length)
                writer.writeString(2, this.json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PpgJson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PpgJson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nome = reader.readString();
                        break;
                    case 2:
                        message.json = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PpgJson {
            return PpgJson.deserialize(bytes);
        }
    }
    export class PpgResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: PpgJson[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, PpgJson, 1) as PpgJson[];
        }
        set item(value: PpgJson[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof PpgJson.prototype.toObject>[];
        }): PpgResponse {
            const message = new PpgResponse({});
            if (data.item != null) {
                message.item = data.item.map(item => PpgJson.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof PpgJson.prototype.toObject>[];
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: PpgJson) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: PpgJson) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PpgResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PpgResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PpgJson.deserialize(reader), PpgJson));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PpgResponse {
            return PpgResponse.deserialize(bytes);
        }
    }
    export class LogoutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): LogoutRequest {
            const message = new LogoutRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutRequest {
            return LogoutRequest.deserialize(bytes);
        }
    }
    export class LogoutResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            logout?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("logout" in data && data.logout != undefined) {
                    this.logout = data.logout;
                }
            }
        }
        get logout() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set logout(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            logout?: boolean;
        }): LogoutResponse {
            const message = new LogoutResponse({});
            if (data.logout != null) {
                message.logout = data.logout;
            }
            return message;
        }
        toObject() {
            const data: {
                logout?: boolean;
            } = {};
            if (this.logout != null) {
                data.logout = this.logout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.logout != false)
                writer.writeBool(1, this.logout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.logout = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutResponse {
            return LogoutResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({
            erro?: boolean;
        } & (({
            avatar?: string;
        }) | ({
            nome?: string;
        }) | ({
            email?: string;
        }) | ({
            idlattes?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("nome" in data && data.nome != undefined) {
                    this.nome = data.nome;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("idlattes" in data && data.idlattes != undefined) {
                    this.idlattes = data.idlattes;
                }
                if ("erro" in data && data.erro != undefined) {
                    this.erro = data.erro;
                }
            }
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_avatar() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get nome() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nome(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_nome() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get idlattes() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set idlattes(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_idlattes() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get erro() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set erro(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get _avatar() {
            const cases: {
                [index: number]: "none" | "avatar";
            } = {
                0: "none",
                1: "avatar"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _nome() {
            const cases: {
                [index: number]: "none" | "nome";
            } = {
                0: "none",
                2: "nome"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _email() {
            const cases: {
                [index: number]: "none" | "email";
            } = {
                0: "none",
                3: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _idlattes() {
            const cases: {
                [index: number]: "none" | "idlattes";
            } = {
                0: "none",
                4: "idlattes"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            avatar?: string;
            nome?: string;
            email?: string;
            idlattes?: string;
            erro?: boolean;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.nome != null) {
                message.nome = data.nome;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.idlattes != null) {
                message.idlattes = data.idlattes;
            }
            if (data.erro != null) {
                message.erro = data.erro;
            }
            return message;
        }
        toObject() {
            const data: {
                avatar?: string;
                nome?: string;
                email?: string;
                idlattes?: string;
                erro?: boolean;
            } = {};
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.nome != null) {
                data.nome = this.nome;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.idlattes != null) {
                data.idlattes = this.idlattes;
            }
            if (this.erro != null) {
                data.erro = this.erro;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_avatar)
                writer.writeString(1, this.avatar);
            if (this.has_nome)
                writer.writeString(2, this.nome);
            if (this.has_email)
                writer.writeString(3, this.email);
            if (this.has_idlattes)
                writer.writeString(4, this.idlattes);
            if (this.erro != false)
                writer.writeBool(5, this.erro);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.avatar = reader.readString();
                        break;
                    case 2:
                        message.nome = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.idlattes = reader.readString();
                        break;
                    case 5:
                        message.erro = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class UsuarioRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): UsuarioRequest {
            const message = new UsuarioRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsuarioRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsuarioRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsuarioRequest {
            return UsuarioRequest.deserialize(bytes);
        }
    }
    export class UsuarioResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            idlattes?: string;
            email?: string;
            full_name?: string;
            is_superuser?: boolean;
            is_admin?: boolean;
            id_ies?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("idlattes" in data && data.idlattes != undefined) {
                    this.idlattes = data.idlattes;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("full_name" in data && data.full_name != undefined) {
                    this.full_name = data.full_name;
                }
                if ("is_superuser" in data && data.is_superuser != undefined) {
                    this.is_superuser = data.is_superuser;
                }
                if ("is_admin" in data && data.is_admin != undefined) {
                    this.is_admin = data.is_admin;
                }
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
            }
        }
        get idlattes() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set idlattes(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get full_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set full_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_superuser() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_superuser(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_admin() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_admin(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            idlattes?: string;
            email?: string;
            full_name?: string;
            is_superuser?: boolean;
            is_admin?: boolean;
            id_ies?: string;
        }): UsuarioResponse {
            const message = new UsuarioResponse({});
            if (data.idlattes != null) {
                message.idlattes = data.idlattes;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.full_name != null) {
                message.full_name = data.full_name;
            }
            if (data.is_superuser != null) {
                message.is_superuser = data.is_superuser;
            }
            if (data.is_admin != null) {
                message.is_admin = data.is_admin;
            }
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            return message;
        }
        toObject() {
            const data: {
                idlattes?: string;
                email?: string;
                full_name?: string;
                is_superuser?: boolean;
                is_admin?: boolean;
                id_ies?: string;
            } = {};
            if (this.idlattes != null) {
                data.idlattes = this.idlattes;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.full_name != null) {
                data.full_name = this.full_name;
            }
            if (this.is_superuser != null) {
                data.is_superuser = this.is_superuser;
            }
            if (this.is_admin != null) {
                data.is_admin = this.is_admin;
            }
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.idlattes.length)
                writer.writeString(1, this.idlattes);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.full_name.length)
                writer.writeString(3, this.full_name);
            if (this.is_superuser != false)
                writer.writeBool(4, this.is_superuser);
            if (this.is_admin != false)
                writer.writeBool(5, this.is_admin);
            if (this.id_ies.length)
                writer.writeString(6, this.id_ies);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsuarioResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsuarioResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.idlattes = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.full_name = reader.readString();
                        break;
                    case 4:
                        message.is_superuser = reader.readBool();
                        break;
                    case 5:
                        message.is_admin = reader.readBool();
                        break;
                    case 6:
                        message.id_ies = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsuarioResponse {
            return UsuarioResponse.deserialize(bytes);
        }
    }
    export class PPGLSRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6]];
        constructor(data?: any[] | ({} & (({
            id_disc?: string;
        }) | ({
            id_ies?: string;
        }) | ({
            id_curso?: string;
        }) | ({
            id_grade?: string;
        }) | ({
            anoi?: number;
        }) | ({
            anof?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_disc" in data && data.id_disc != undefined) {
                    this.id_disc = data.id_disc;
                }
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
                if ("id_curso" in data && data.id_curso != undefined) {
                    this.id_curso = data.id_curso;
                }
                if ("id_grade" in data && data.id_grade != undefined) {
                    this.id_grade = data.id_grade;
                }
                if ("anoi" in data && data.anoi != undefined) {
                    this.anoi = data.anoi;
                }
                if ("anof" in data && data.anof != undefined) {
                    this.anof = data.anof;
                }
            }
        }
        get id_disc() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_disc(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_id_disc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_id_ies() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id_curso() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set id_curso(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_id_curso() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get id_grade() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id_grade(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_id_grade() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get anoi() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set anoi(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_anoi() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get anof() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set anof(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
        }
        get has_anof() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _id_disc() {
            const cases: {
                [index: number]: "none" | "id_disc";
            } = {
                0: "none",
                1: "id_disc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _id_ies() {
            const cases: {
                [index: number]: "none" | "id_ies";
            } = {
                0: "none",
                2: "id_ies"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _id_curso() {
            const cases: {
                [index: number]: "none" | "id_curso";
            } = {
                0: "none",
                3: "id_curso"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _id_grade() {
            const cases: {
                [index: number]: "none" | "id_grade";
            } = {
                0: "none",
                4: "id_grade"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _anoi() {
            const cases: {
                [index: number]: "none" | "anoi";
            } = {
                0: "none",
                5: "anoi"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _anof() {
            const cases: {
                [index: number]: "none" | "anof";
            } = {
                0: "none",
                6: "anof"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            id_disc?: string;
            id_ies?: string;
            id_curso?: string;
            id_grade?: string;
            anoi?: number;
            anof?: number;
        }): PPGLSRequest {
            const message = new PPGLSRequest({});
            if (data.id_disc != null) {
                message.id_disc = data.id_disc;
            }
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            if (data.id_curso != null) {
                message.id_curso = data.id_curso;
            }
            if (data.id_grade != null) {
                message.id_grade = data.id_grade;
            }
            if (data.anoi != null) {
                message.anoi = data.anoi;
            }
            if (data.anof != null) {
                message.anof = data.anof;
            }
            return message;
        }
        toObject() {
            const data: {
                id_disc?: string;
                id_ies?: string;
                id_curso?: string;
                id_grade?: string;
                anoi?: number;
                anof?: number;
            } = {};
            if (this.id_disc != null) {
                data.id_disc = this.id_disc;
            }
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            if (this.id_curso != null) {
                data.id_curso = this.id_curso;
            }
            if (this.id_grade != null) {
                data.id_grade = this.id_grade;
            }
            if (this.anoi != null) {
                data.anoi = this.anoi;
            }
            if (this.anof != null) {
                data.anof = this.anof;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id_disc)
                writer.writeString(1, this.id_disc);
            if (this.has_id_ies)
                writer.writeString(2, this.id_ies);
            if (this.has_id_curso)
                writer.writeString(3, this.id_curso);
            if (this.has_id_grade)
                writer.writeString(4, this.id_grade);
            if (this.has_anoi)
                writer.writeInt32(5, this.anoi);
            if (this.has_anof)
                writer.writeInt32(6, this.anof);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PPGLSRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PPGLSRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_disc = reader.readString();
                        break;
                    case 2:
                        message.id_ies = reader.readString();
                        break;
                    case 3:
                        message.id_curso = reader.readString();
                        break;
                    case 4:
                        message.id_grade = reader.readString();
                        break;
                    case 5:
                        message.anoi = reader.readInt32();
                        break;
                    case 6:
                        message.anof = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PPGLSRequest {
            return PPGLSRequest.deserialize(bytes);
        }
    }
    export class PPGLSJson extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            nome?: string;
        }) | ({
            json?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nome" in data && data.nome != undefined) {
                    this.nome = data.nome;
                }
                if ("json" in data && data.json != undefined) {
                    this.json = data.json;
                }
            }
        }
        get nome() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nome(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_nome() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get json() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set json(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_json() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _nome() {
            const cases: {
                [index: number]: "none" | "nome";
            } = {
                0: "none",
                1: "nome"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _json() {
            const cases: {
                [index: number]: "none" | "json";
            } = {
                0: "none",
                2: "json"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            nome?: string;
            json?: string;
        }): PPGLSJson {
            const message = new PPGLSJson({});
            if (data.nome != null) {
                message.nome = data.nome;
            }
            if (data.json != null) {
                message.json = data.json;
            }
            return message;
        }
        toObject() {
            const data: {
                nome?: string;
                json?: string;
            } = {};
            if (this.nome != null) {
                data.nome = this.nome;
            }
            if (this.json != null) {
                data.json = this.json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nome)
                writer.writeString(1, this.nome);
            if (this.has_json)
                writer.writeString(2, this.json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PPGLSJson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PPGLSJson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nome = reader.readString();
                        break;
                    case 2:
                        message.json = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PPGLSJson {
            return PPGLSJson.deserialize(bytes);
        }
    }
    export class PPGLSResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: PPGLSJson[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, PPGLSJson, 1) as PPGLSJson[];
        }
        set item(value: PPGLSJson[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof PPGLSJson.prototype.toObject>[];
        }): PPGLSResponse {
            const message = new PPGLSResponse({});
            if (data.item != null) {
                message.item = data.item.map(item => PPGLSJson.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof PPGLSJson.prototype.toObject>[];
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: PPGLSJson) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: PPGLSJson) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PPGLSResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PPGLSResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PPGLSJson.deserialize(reader), PPGLSJson));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PPGLSResponse {
            return PPGLSResponse.deserialize(bytes);
        }
    }
    export class FormularioSerchPPGLSRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            masp?: number;
            tipo?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("masp" in data && data.masp != undefined) {
                    this.masp = data.masp;
                }
                if ("tipo" in data && data.tipo != undefined) {
                    this.tipo = data.tipo;
                }
            }
        }
        get masp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set masp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tipo() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tipo(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            masp?: number;
            tipo?: number;
        }): FormularioSerchPPGLSRequest {
            const message = new FormularioSerchPPGLSRequest({});
            if (data.masp != null) {
                message.masp = data.masp;
            }
            if (data.tipo != null) {
                message.tipo = data.tipo;
            }
            return message;
        }
        toObject() {
            const data: {
                masp?: number;
                tipo?: number;
            } = {};
            if (this.masp != null) {
                data.masp = this.masp;
            }
            if (this.tipo != null) {
                data.tipo = this.tipo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.masp != 0)
                writer.writeInt32(1, this.masp);
            if (this.tipo != 0)
                writer.writeInt32(2, this.tipo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormularioSerchPPGLSRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormularioSerchPPGLSRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.masp = reader.readInt32();
                        break;
                    case 2:
                        message.tipo = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormularioSerchPPGLSRequest {
            return FormularioSerchPPGLSRequest.deserialize(bytes);
        }
    }
    export class FormularioIndicadoresRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nome_formulario?: string;
            data_inicio?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nome_formulario" in data && data.nome_formulario != undefined) {
                    this.nome_formulario = data.nome_formulario;
                }
                if ("data_inicio" in data && data.data_inicio != undefined) {
                    this.data_inicio = data.data_inicio;
                }
            }
        }
        get nome_formulario() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nome_formulario(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_inicio() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data_inicio(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            nome_formulario?: string;
            data_inicio?: string;
        }): FormularioIndicadoresRequest {
            const message = new FormularioIndicadoresRequest({});
            if (data.nome_formulario != null) {
                message.nome_formulario = data.nome_formulario;
            }
            if (data.data_inicio != null) {
                message.data_inicio = data.data_inicio;
            }
            return message;
        }
        toObject() {
            const data: {
                nome_formulario?: string;
                data_inicio?: string;
            } = {};
            if (this.nome_formulario != null) {
                data.nome_formulario = this.nome_formulario;
            }
            if (this.data_inicio != null) {
                data.data_inicio = this.data_inicio;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nome_formulario.length)
                writer.writeString(1, this.nome_formulario);
            if (this.data_inicio.length)
                writer.writeString(2, this.data_inicio);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormularioIndicadoresRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormularioIndicadoresRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nome_formulario = reader.readString();
                        break;
                    case 2:
                        message.data_inicio = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormularioIndicadoresRequest {
            return FormularioIndicadoresRequest.deserialize(bytes);
        }
    }
    export class FormularioPPGLSRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: FormularioPPGLSJson[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, FormularioPPGLSJson, 1) as FormularioPPGLSJson[];
        }
        set item(value: FormularioPPGLSJson[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof FormularioPPGLSJson.prototype.toObject>[];
        }): FormularioPPGLSRequest {
            const message = new FormularioPPGLSRequest({});
            if (data.item != null) {
                message.item = data.item.map(item => FormularioPPGLSJson.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof FormularioPPGLSJson.prototype.toObject>[];
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: FormularioPPGLSJson) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: FormularioPPGLSJson) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormularioPPGLSRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormularioPPGLSRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FormularioPPGLSJson.deserialize(reader), FormularioPPGLSJson));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormularioPPGLSRequest {
            return FormularioPPGLSRequest.deserialize(bytes);
        }
    }
    export class FormularioPPGLSJson extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            nome?: string;
        }) | ({
            json?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nome" in data && data.nome != undefined) {
                    this.nome = data.nome;
                }
                if ("json" in data && data.json != undefined) {
                    this.json = data.json;
                }
            }
        }
        get nome() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nome(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_nome() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get json() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set json(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_json() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _nome() {
            const cases: {
                [index: number]: "none" | "nome";
            } = {
                0: "none",
                1: "nome"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _json() {
            const cases: {
                [index: number]: "none" | "json";
            } = {
                0: "none",
                2: "json"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            nome?: string;
            json?: string;
        }): FormularioPPGLSJson {
            const message = new FormularioPPGLSJson({});
            if (data.nome != null) {
                message.nome = data.nome;
            }
            if (data.json != null) {
                message.json = data.json;
            }
            return message;
        }
        toObject() {
            const data: {
                nome?: string;
                json?: string;
            } = {};
            if (this.nome != null) {
                data.nome = this.nome;
            }
            if (this.json != null) {
                data.json = this.json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nome)
                writer.writeString(1, this.nome);
            if (this.has_json)
                writer.writeString(2, this.json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormularioPPGLSJson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormularioPPGLSJson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nome = reader.readString();
                        break;
                    case 2:
                        message.json = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormularioPPGLSJson {
            return FormularioPPGLSJson.deserialize(bytes);
        }
    }
    export class FormularioPPGLSResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: FormularioPPGLSJson[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, FormularioPPGLSJson, 1) as FormularioPPGLSJson[];
        }
        set item(value: FormularioPPGLSJson[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof FormularioPPGLSJson.prototype.toObject>[];
        }): FormularioPPGLSResponse {
            const message = new FormularioPPGLSResponse({});
            if (data.item != null) {
                message.item = data.item.map(item => FormularioPPGLSJson.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof FormularioPPGLSJson.prototype.toObject>[];
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: FormularioPPGLSJson) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: FormularioPPGLSJson) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormularioPPGLSResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormularioPPGLSResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FormularioPPGLSJson.deserialize(reader), FormularioPPGLSJson));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormularioPPGLSResponse {
            return FormularioPPGLSResponse.deserialize(bytes);
        }
    }
    export class GradRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            id?: string;
        }) | ({
            anoi?: number;
        }) | ({
            anof?: number;
        }) | ({
            id_ies?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("anoi" in data && data.anoi != undefined) {
                    this.anoi = data.anoi;
                }
                if ("anof" in data && data.anof != undefined) {
                    this.anof = data.anof;
                }
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get anoi() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set anoi(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_anoi() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get anof() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set anof(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_anof() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_id_ies() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _id() {
            const cases: {
                [index: number]: "none" | "id";
            } = {
                0: "none",
                1: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _anoi() {
            const cases: {
                [index: number]: "none" | "anoi";
            } = {
                0: "none",
                2: "anoi"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _anof() {
            const cases: {
                [index: number]: "none" | "anof";
            } = {
                0: "none",
                3: "anof"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _id_ies() {
            const cases: {
                [index: number]: "none" | "id_ies";
            } = {
                0: "none",
                4: "id_ies"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            id?: string;
            anoi?: number;
            anof?: number;
            id_ies?: string;
        }): GradRequest {
            const message = new GradRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.anoi != null) {
                message.anoi = data.anoi;
            }
            if (data.anof != null) {
                message.anof = data.anof;
            }
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                anoi?: number;
                anof?: number;
                id_ies?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.anoi != null) {
                data.anoi = this.anoi;
            }
            if (this.anof != null) {
                data.anof = this.anof;
            }
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeString(1, this.id);
            if (this.has_anoi)
                writer.writeInt32(2, this.anoi);
            if (this.has_anof)
                writer.writeInt32(3, this.anof);
            if (this.has_id_ies)
                writer.writeString(4, this.id_ies);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GradRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GradRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.anoi = reader.readInt32();
                        break;
                    case 3:
                        message.anof = reader.readInt32();
                        break;
                    case 4:
                        message.id_ies = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GradRequest {
            return GradRequest.deserialize(bytes);
        }
    }
    export class GradDisciplinasRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6]];
        constructor(data?: any[] | ({} & (({
            id_disc?: string;
        }) | ({
            id_ies?: string;
        }) | ({
            id_curso?: string;
        }) | ({
            id_grade?: string;
        }) | ({
            anoi?: number;
        }) | ({
            anof?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_disc" in data && data.id_disc != undefined) {
                    this.id_disc = data.id_disc;
                }
                if ("id_ies" in data && data.id_ies != undefined) {
                    this.id_ies = data.id_ies;
                }
                if ("id_curso" in data && data.id_curso != undefined) {
                    this.id_curso = data.id_curso;
                }
                if ("id_grade" in data && data.id_grade != undefined) {
                    this.id_grade = data.id_grade;
                }
                if ("anoi" in data && data.anoi != undefined) {
                    this.anoi = data.anoi;
                }
                if ("anof" in data && data.anof != undefined) {
                    this.anof = data.anof;
                }
            }
        }
        get id_disc() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_disc(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_id_disc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id_ies() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id_ies(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_id_ies() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id_curso() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set id_curso(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_id_curso() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get id_grade() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id_grade(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_id_grade() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get anoi() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set anoi(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_anoi() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get anof() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set anof(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
        }
        get has_anof() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _id_disc() {
            const cases: {
                [index: number]: "none" | "id_disc";
            } = {
                0: "none",
                1: "id_disc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _id_ies() {
            const cases: {
                [index: number]: "none" | "id_ies";
            } = {
                0: "none",
                2: "id_ies"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _id_curso() {
            const cases: {
                [index: number]: "none" | "id_curso";
            } = {
                0: "none",
                3: "id_curso"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _id_grade() {
            const cases: {
                [index: number]: "none" | "id_grade";
            } = {
                0: "none",
                4: "id_grade"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _anoi() {
            const cases: {
                [index: number]: "none" | "anoi";
            } = {
                0: "none",
                5: "anoi"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _anof() {
            const cases: {
                [index: number]: "none" | "anof";
            } = {
                0: "none",
                6: "anof"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            id_disc?: string;
            id_ies?: string;
            id_curso?: string;
            id_grade?: string;
            anoi?: number;
            anof?: number;
        }): GradDisciplinasRequest {
            const message = new GradDisciplinasRequest({});
            if (data.id_disc != null) {
                message.id_disc = data.id_disc;
            }
            if (data.id_ies != null) {
                message.id_ies = data.id_ies;
            }
            if (data.id_curso != null) {
                message.id_curso = data.id_curso;
            }
            if (data.id_grade != null) {
                message.id_grade = data.id_grade;
            }
            if (data.anoi != null) {
                message.anoi = data.anoi;
            }
            if (data.anof != null) {
                message.anof = data.anof;
            }
            return message;
        }
        toObject() {
            const data: {
                id_disc?: string;
                id_ies?: string;
                id_curso?: string;
                id_grade?: string;
                anoi?: number;
                anof?: number;
            } = {};
            if (this.id_disc != null) {
                data.id_disc = this.id_disc;
            }
            if (this.id_ies != null) {
                data.id_ies = this.id_ies;
            }
            if (this.id_curso != null) {
                data.id_curso = this.id_curso;
            }
            if (this.id_grade != null) {
                data.id_grade = this.id_grade;
            }
            if (this.anoi != null) {
                data.anoi = this.anoi;
            }
            if (this.anof != null) {
                data.anof = this.anof;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id_disc)
                writer.writeString(1, this.id_disc);
            if (this.has_id_ies)
                writer.writeString(2, this.id_ies);
            if (this.has_id_curso)
                writer.writeString(3, this.id_curso);
            if (this.has_id_grade)
                writer.writeString(4, this.id_grade);
            if (this.has_anoi)
                writer.writeInt32(5, this.anoi);
            if (this.has_anof)
                writer.writeInt32(6, this.anof);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GradDisciplinasRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GradDisciplinasRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_disc = reader.readString();
                        break;
                    case 2:
                        message.id_ies = reader.readString();
                        break;
                    case 3:
                        message.id_curso = reader.readString();
                        break;
                    case 4:
                        message.id_grade = reader.readString();
                        break;
                    case 5:
                        message.anoi = reader.readInt32();
                        break;
                    case 6:
                        message.anof = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GradDisciplinasRequest {
            return GradDisciplinasRequest.deserialize(bytes);
        }
    }
    export class GradJson extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            nome?: string;
        }) | ({
            json?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nome" in data && data.nome != undefined) {
                    this.nome = data.nome;
                }
                if ("json" in data && data.json != undefined) {
                    this.json = data.json;
                }
            }
        }
        get nome() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nome(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_nome() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get json() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set json(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_json() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _nome() {
            const cases: {
                [index: number]: "none" | "nome";
            } = {
                0: "none",
                1: "nome"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _json() {
            const cases: {
                [index: number]: "none" | "json";
            } = {
                0: "none",
                2: "json"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            nome?: string;
            json?: string;
        }): GradJson {
            const message = new GradJson({});
            if (data.nome != null) {
                message.nome = data.nome;
            }
            if (data.json != null) {
                message.json = data.json;
            }
            return message;
        }
        toObject() {
            const data: {
                nome?: string;
                json?: string;
            } = {};
            if (this.nome != null) {
                data.nome = this.nome;
            }
            if (this.json != null) {
                data.json = this.json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nome)
                writer.writeString(1, this.nome);
            if (this.has_json)
                writer.writeString(2, this.json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GradJson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GradJson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nome = reader.readString();
                        break;
                    case 2:
                        message.json = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GradJson {
            return GradJson.deserialize(bytes);
        }
    }
    export class GradResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: GradJson[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, GradJson, 1) as GradJson[];
        }
        set item(value: GradJson[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof GradJson.prototype.toObject>[];
        }): GradResponse {
            const message = new GradResponse({});
            if (data.item != null) {
                message.item = data.item.map(item => GradJson.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof GradJson.prototype.toObject>[];
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: GradJson) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: GradJson) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GradResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GradResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GradJson.deserialize(reader), GradJson));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GradResponse {
            return GradResponse.deserialize(bytes);
        }
    }
}
