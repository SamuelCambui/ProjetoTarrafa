version: '3.8'

services:
  frontend-teste:
    build: ./frontend/flaskmiddle
    command: >
      /bin/bash -c "NUM_WORKERS=$$((2 * $$(nproc) + 1)) &&
      gunicorn -b 0.0.0.0:${FRONTEND_PORT} --worker-class gevent --workers $$NUM_WORKERS --timeout 600 run:app"
    env_file:
      - ./.env
    depends_on:
      - backend-teste
    expose:
      - ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - frontend-backend-net

#   celery_queries-teste:
#     build: ./backend
#     command: celery -A backend.worker.celery_start_queries worker --autoscale=30,15 -Q fila_queries --loglevel=info --without-heartbeat #--pool=gevent --loglevel=info -c 10 
#     env_file:
#       - ./.env
#     volumes:
#       - .:/app
#     depends_on:
# #      - db-teste
#       rabbitmq:
#         condition: service_healthy
#     networks:
#       - backend-net
#       - banco

  backend-teste:
    build: ./backend
    command: >
      /bin/bash -c "NUM_WORKERS=$$((2 * $$(nproc) + 1)) &&
      gunicorn backend.app.main:app --workers $$NUM_WORKERS --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:${BACKEND_PORT} --timeout 600"
    volumes:
      - .:/app
    env_file:
      - ./.env
    expose:
      - ${BACKEND_PORT}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
#      - db-teste
      - redis-teste
      - celery_tasks-teste
      - celery_despachante-teste
    networks:
      - backend-net
      - frontend-backend-net
 

  celery_tasks-teste:
    build: ./backend
    command: celery -A backend.worker.celery_start_tasks worker -Q fila_tasks -c 10
    env_file:
      - ./.env
    volumes:
      - .:/app
    depends_on:
#      - db-teste
      - redis-teste
    networks:
      - backend-net

  celery_despachante-teste:
    build: ./backend
    command: celery -A backend.worker.celery_start_despachante worker -Q fila_despachante --loglevel=info -c 10
    env_file:
      - ./.env
    volumes:
      - .:/app
    depends_on:
#      - db-teste
      - redis-teste
      - celery_tasks-teste
    networks:
      - backend-net

  # grpc-server-teste:
  #   build: ./backend
  #   command: python backend/app/api/api.py
  #   env_file:
  #     - ./.env
  #   volumes:
  #     - .:/app
  #   restart: always
  #   # deploy:
  #   #   replicas: 3
  #   # healthcheck:
  #   #   test: ["CMD", "grpc_health_probe", "-addr=:50052"]
  #   #   interval: 30s
  #   #   timeout: 10s
  #   #   retries: 3
  #   ports:
  #     - "50052:50052"
  #   expose:
  #     - 50052
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - backend-net

  redis-teste:
    image: 'redis:latest'
    env_file:
      - ./.env
    command: --port ${REDIS_PORT}
    expose:
      - ${REDIS_PORT}
    networks:
      - backend-net

  flower-teste:
    build: ./backend
    command: celery -A backend.worker.celery_start_tasks flower --port=5555
    env_file:
      - ./.env
    volumes:
      - .:/app
    depends_on:
#      - db-teste
      - redis-teste
      - celery_tasks-teste
    ports:
      - "5555:5555"
    expose:
      - 5555
    networks:
      - backend-net

#  db-teste:
#    build: ./backend/db
#    env_file:
#      - ./.env
#    command: -p ${POSTGRES_PORT}
#    expose:
#      - ${POSTGRES_PORT}
#    volumes:
#      - ./dados/postgres_data:/var/lib/postgresql/data
#      - ./backend/db/tarrafaDB_2_tables.sql:/docker-entrypoint-initdb.d/tarrafaDB_2_tables.sql
#      - ./backend/db/tarrafaDB_grad_tables.sql:/docker-entrypoint-initdb.d/tarrafaDB_grad_tables.sql
#      - ./backup:/backup
#    networks:
#      - backend-net

#  pgadmin-teste:
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: "admin@tarrafa.unimontes.br"
#      PGADMIN_DEFAULT_PASSWORD: "#pgadmin4@tarrafa.unimontes#2024"
#    ports:
#      - "8007:80"
#    restart: "no"  # Importante para não iniciar automaticamente
#    networks:
#      - backend-net  # Acesso à rede onde o DB está disponível


networks:
  frontend-backend-net:
  backend-net:
    
